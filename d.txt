import os
import json
import subprocess
import logging

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

def process_json_specs(specs_dir):
    json_specs = [f for f in os.listdir(specs_dir) if f.endswith('.json')]
    for json_spec_file in json_specs:
        json_spec_path = os.path.join(specs_dir, json_spec_file)
        process_single_spec(json_spec_path)

def process_single_spec(json_spec_path):
    try:
        with open(json_spec_path, 'r') as file:
            json_spec = json.load(file)

        temp_json_path = 'temp_spec.json'
        with open(temp_json_path, 'w') as temp_file:
            json.dump(json_spec, temp_file)

        subprocess.run(['python', 'src/automation.py', temp_json_path], check=True)
    except FileNotFoundError:
        logging.error(f"File not found: {json_spec_path}")
    except json.JSONDecodeError:
        logging.error(f"Error decoding JSON file: {json_spec_path}")
    except subprocess.CalledProcessError as e:
        logging.error(f"Error running automation script: {e}")

def main():
    specs_dir = 'ClusterInputFolder'
    if not os.path.exists(specs_dir):
        logging.error(f"Specs directory does not exist: {specs_dir}")
        return

    process_json_specs(specs_dir)

if __name__ == "__main__":
    main()




import os
import sys
import json
import yaml
import logging

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

def load_template(env, node_type, spec):
    try:
        template_file = f"{spec}/{env}.yaml"
        template_path = os.path.join('../AKS-Cluster-Specs/specifications', template_file)
        with open(template_path, 'r') as file:
            template = yaml.safe_load(file)
        return template
    except FileNotFoundError:
        raise FileNotFoundError(f"Template not found: {template_path}")
    except yaml.YAMLError:
        raise ValueError(f"Error loading YAML template: {template_path}")

def merge_spec_with_template(spec, template):
    try:
        template['metadata']['name'] = spec['clusterName']
        template['metadata']['labels']['env'] = spec['env']
        template['spec']['controlPlane']['count'] = spec['controlPlaneCount']
        template['spec']['controlPlane']['nodeType'] = spec['nodeType']
        template['spec']['workerNodes']['count'] = spec['workerNodeCount']
        template['spec']['workerNodes']['nodeType'] = spec['nodeType']
        template['spec']['network']['policy'] = spec['networkPolicy']
        template['spec']['storage']['class'] = spec['storageClass']
        template['spec']['version'] = spec['kubernetesVersion']
        template['spec']['region'] = spec['region']
        return template
    except KeyError as e:
        raise KeyError(f"Missing required spec key: {e}")

def save_to_iac_repo(merged_spec, cluster_name):
    base_path = os.path.join('../AKS-Cluster-IaC/clusters', cluster_name)
    definitions_path = os.path.join(base_path, 'definitions')
    configurations_path = os.path.join(base_path, 'configurations')

    os.makedirs(definitions_path, exist_ok=True)
    os.makedirs(configurations_path, exist_ok=True)

    output_path = os.path.join(definitions_path, f"{cluster_name}-cluster-definition.yaml")
    with open(output_path, 'w') as file:
        yaml.dump(merged_spec, file)

    logging.info(f"Cluster definition saved to: {output_path}")

def copy_configurations(cluster_name, configurations):
    configurations_path = os.path.join('../AKS-Cluster-IaC/clusters', cluster_name, 'configurations')
    for config in configurations:
        src_path = os.path.join('../AKS-Cluster-Specs/configurations', config)
        dest_path = os.path.join(configurations_path, config)
        if os.path.exists(src_path):
            with open(src_path, 'r') as file:
                content = file.read()
            with open(dest_path, 'w') as file:
                file.write(content)
            logging.info(f"Configuration {config} copied to {dest_path}")
        else:
            logging.warning(f"Configuration {config} does not exist at {src_path}")

def main():
    if len(sys.argv) != 2:
        logging.error("Usage: python automation.py <json_spec_path>")
        sys.exit(1)

    json_spec_path = sys.argv[1]

    try:
        with open(json_spec_path, 'r') as file:
            json_spec = json.load(file)

        validate_spec(json_spec)

        env = json_spec['env']
        spec = json_spec['spec']
        node_type = json_spec['nodeType']
        template = load_template(env, node_type, spec)
        merged_spec = merge_spec_with_template(json_spec, template)

        cluster_name = json_spec['clusterName']
        save_to_iac_repo(merged_spec, cluster_name)
        copy_configurations(cluster_name, json_spec.get('configurations', []))

    except FileNotFoundError as e:
        logging.error(e)
    except json.JSONDecodeError:
        logging.error(f"Error decoding JSON file: {json_spec_path}")
    except KeyError as e:
        logging.error(e)
    except ValueError as e:
        logging.error(e)

def validate_spec(spec):
    required_keys = ['clusterName', 'env', 'workerNodeCount', 'controlPlaneCount', 'region', 'nodeType', 'kubernetesVersion', 'networkPolicy', 'storageClass']
    for key in required_keys:
        if key not in spec:
            raise KeyError(f"Missing required key in spec: {key}")

if __name__ == "__main__":
    main()




name: Automation Workflow

on:
  push:
    branches:
      - main
    paths:
      - 'AKS-Cluster-Provisioner/ClusterInputFolder/*.json'

jobs:
  trigger-automation:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r AKS-Cluster-Provisioner/requirements.txt

      - name: Run automation script
        run: python AKS-Cluster-Provisioner/src/main.py





FROM python:3.8-slim

WORKDIR /app

COPY requirements.txt requirements.txt
RUN pip install --no-cache-dir -r requirements.txt

COPY src/ src/

CMD ["python", "src/main.py"]
